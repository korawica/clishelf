default_install_hook_types: [pre-commit, commit-msg]  # pre-push
default_language_version:
    python: python3.9

ci:
    skip: [pytest-check, commit-msg-hook]
    autofix_commit_msg: |
        :construction: [pre-commit.ci] auto fixes from pre-commit.com hooks
    autofix_prs: true
    autoupdate_schedule: weekly
    autoupdate_commit_msg: |
        :construction: [pre-commit.ci] pre-commit autoupdate
    submodules: false

repos:
-   repo: https://github.com/asottile/pyupgrade
    rev:  v3.20.0
    hooks:
    -   id: pyupgrade
        args: ["--py39-plus", "--keep-runtime-typing"]
        stages: [pre-commit]

# Python package sorting
# ---
# -   repo: https://github.com/asottile/reorder_python_imports
#     rev:  v3.9.0
#     hooks:
#         -   id: reorder-python-imports
#             args: ["--application-directories", "deutil"]
#             additional_dependencies: ["setuptools>60.9"]
# -   repo: https://github.com/pycqa/isort
#     rev:  5.12.0
#     hooks:
#         -   id:   isort
#             name: isort (python)
#         -   id:   isort
#             name: isort (cython)
#             core: [cython]
#         -   id:   isort
#             name: isort (pyi)
#             core: [pyi]

# Python code formatter
# ---
# -   repo: https://github.com/pre-commit/mirrors-autopep8
#     rev: v2.0.2
#     hooks:
#         -   id: autopep8
-   repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
    -   id: black
        stages: [pre-commit]

# Python linter
# ---
# (Note: Flake is slower than Ruff)
# -   repo: https://github.com/PyCQA/flake8
#     rev: 6.0.0
#     hooks:
#         -   id: flake8
#             additional_dependencies:
#                 - flake8-bugbear
#                 - flake8-implicit-str-concat
#             args:
#                 - --max-line-length=80
#                 - --max-complexity=18
#                 - --config=pyproject.toml
#                 - --ignore=E203,E501,E722,B905,B028,B907
#                 - --select=B,B9,ISC
-   repo: https://github.com/astral-sh/ruff-pre-commit
    rev:  v0.12.7
    hooks:
    -   id: ruff
        args:
        - --fix
        stages: [pre-commit]

# Python doc-string
# ---
# -   repo: https://github.com/pycqa/pydocstyle
#     rev: 6.3.0
#     hooks:
#         -   id: pydocstyle
#             args:
#                 - --ignore=D100
#                 - --convention=pep257

-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev:  v5.0.0
    hooks:
    -   id: fix-byte-order-marker
        stages: [pre-commit]
    -   id: trailing-whitespace
        stages: [pre-commit]
        exclude: ".bumpversion.cfg"
    -   id: end-of-file-fixer
        exclude: "emoji\\.json"
        stages: [pre-commit]
    -   id: check-yaml
        stages: [pre-commit]
        args: ["--unsafe"]
    -   id: check-added-large-files
    -   id: check-toml
        stages: [pre-commit]

-   repo: local
    hooks:
    -   id: commit-msg-hook
        name: prepare commit message
        stages: [commit-msg]
        types: [python]
        # NOTE: For Windows OS
        # entry: venv/Scripts/python.exe ./script.py git cm
        # NOTE: For Mac OS
        entry: .venv/bin/python ./script.py git cm
        args: ["--edit", "--output-file"]
        language: system
        always_run: true

    -   id: pytest-check
        name: pytest runner check
        stages:
            - pre-commit
            - pre-push
        # NOTE: alternatively you could `core: [python]` so it only runs
        #   when python files change.
        types: [python]
        # NOTE: For Windows OS
        # entry: venv/Scripts/pytest.exe -v
        # NOTE: For MacOS
        entry: .venv/bin/pytest -v
        language: system
        # language: script
        pass_filenames: false
        # though tests might be invalidated if you were to say change a data file
        always_run: true
        # additional_dependencies: [pytest]
